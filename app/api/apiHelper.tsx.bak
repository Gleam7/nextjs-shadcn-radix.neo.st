import axios, { AxiosInstance } from 'axios';
import { getSession } from '../session/session';
import { handleApiException } from '../common/common';

let fitId = '';
if (typeof window !== 'undefined') {
	fitId = String(getSession('fittingId'));
}

axios.defaults.headers.get['Content-Type'] =
	'application/x-www-form-urlencoded';
axios.defaults.headers.put['Content-Type'] = 'application/json;charset=utf-8';
axios.defaults.headers.patch['Content-Type'] = 'application/json;charset=utf-8';
axios.defaults.headers.patch['Access-Control-Allow-Origin'] = '*';
axios.defaults.headers.delete['Content-Type'] =
	'application/json;charset=utf-8';
axios.defaults.headers.delete['Access-Control-Allow-Origin'] = '*';
axios.defaults.headers.post['Content-Type'] = 'application/json;charset=utf-8';
axios.defaults.headers.post['Access-Control-Allow-Origin'] = '*';
axios.defaults.timeout = 500;

export const customAxios: AxiosInstance = axios.create({
	baseURL: 'https://api.dev.fittingnote.com/',
	headers: {
		SALESONID: fitId,
	},
});

export async function customGet(
	url: string,
	config = {},
	errorHandler = Function,
) {
	return await customAxios
		.get(url, { ...config })
		.then(response => response.data)
		.catch(error => {
			handleApiException(error, errorHandler);
		});
}

export async function customPost(
	url: string,
	data: any,
	config = {},
	errorHandler = Function,
) {
	return customAxios
		.post(url, { ...data }, { ...config })
		.then(response => response)
		.catch(error => {
			handleApiException(error, errorHandler);
		});
}

export async function customPut(
	url: string,
	data: any,
	config = {},
	errorHandler = Function,
) {
	return customAxios
		.put(url, { ...data }, { ...config })
		.then(response => response)
		.catch(error => {
			handleApiException(error, errorHandler);
		});
}

export async function customDel(
	url: string,
	config = {},
	errorHandler = Function,
) {
	return await customAxios
		.delete(url, { ...config })
		.then(response => response)
		.catch(error => {
			handleApiException(error, errorHandler);
		});
}
